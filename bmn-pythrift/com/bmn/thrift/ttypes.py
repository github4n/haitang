#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class BmnPartner:
  """
  Struct defined
  """
  ALL = 0
  BAIDU = 1
  TENCENT = 2
  ALIBABA = 3
  LENOVO = 4

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "BAIDU",
    2: "TENCENT",
    3: "ALIBABA",
    4: "LENOVO",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "BAIDU": 1,
    "TENCENT": 2,
    "ALIBABA": 3,
    "LENOVO": 4,
  }

class ErrorCode:
  ALL = 0
  OK = 1
  FORCE_RECONNECT = 2
  FORCE_CLOSE = 3

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "OK",
    2: "FORCE_RECONNECT",
    3: "FORCE_CLOSE",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "OK": 1,
    "FORCE_RECONNECT": 2,
    "FORCE_CLOSE": 3,
  }


class BmnAnswer:
  """
  Attributes:
   - r
   - c
   - t
   - u
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'r', None, None, ), # 1
    (2, TType.STRING, 'c', None, None, ), # 2
    (3, TType.STRING, 't', None, None, ), # 3
    (4, TType.STRING, 'u', None, None, ), # 4
  )

  def __init__(self, r=None, c=None, t=None, u=None,):
    self.r = r
    self.c = c
    self.t = t
    self.u = u

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.r = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.c = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.t = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.u = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BmnAnswer')
    if self.r is not None:
      oprot.writeFieldBegin('r', TType.STRING, 1)
      oprot.writeString(self.r)
      oprot.writeFieldEnd()
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.STRING, 2)
      oprot.writeString(self.c)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.STRING, 3)
      oprot.writeString(self.t)
      oprot.writeFieldEnd()
    if self.u is not None:
      oprot.writeFieldBegin('u', TType.STRING, 4)
      oprot.writeString(self.u)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.r is None:
      raise TProtocol.TProtocolException(message='Required field r is unset!')
    if self.c is None:
      raise TProtocol.TProtocolException(message='Required field c is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.r)
    value = (value * 31) ^ hash(self.c)
    value = (value * 31) ^ hash(self.t)
    value = (value * 31) ^ hash(self.u)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BmnResult:
  """
  Attributes:
   - q
   - op
   - type
   - answer
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'q', None, None, ), # 1
    (2, TType.STRING, 'op', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.LIST, 'answer', (TType.STRUCT,(BmnAnswer, BmnAnswer.thrift_spec)), None, ), # 4
  )

  def __init__(self, q=None, op=None, type=None, answer=None,):
    self.q = q
    self.op = op
    self.type = type
    self.answer = answer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.q = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.op = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.answer = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = BmnAnswer()
            _elem5.read(iprot)
            self.answer.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BmnResult')
    if self.q is not None:
      oprot.writeFieldBegin('q', TType.STRING, 1)
      oprot.writeString(self.q)
      oprot.writeFieldEnd()
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.STRING, 2)
      oprot.writeString(self.op)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.answer is not None:
      oprot.writeFieldBegin('answer', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.answer))
      for iter6 in self.answer:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.q is None:
      raise TProtocol.TProtocolException(message='Required field q is unset!')
    if self.op is None:
      raise TProtocol.TProtocolException(message='Required field op is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.answer is None:
      raise TProtocol.TProtocolException(message='Required field answer is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.q)
    value = (value * 31) ^ hash(self.op)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.answer)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
