#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import com.bmn.thrift.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RequestType:
  ALL = 0
  HEARTBEAT = 1

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "HEARTBEAT",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "HEARTBEAT": 1,
  }


class BmnRequest:
  """
  Attributes:
   - version
   - tid
   - type
   - success
   - cp
   - properties
   - flag
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'version', None, 3, ), # 1
    (2, TType.I64, 'tid', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.BOOL, 'success', None, None, ), # 4
    (5, TType.I32, 'cp', None, 100, ), # 5
    (6, TType.MAP, 'properties', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.BYTE, 'flag', None, 1, ), # 7
    (8, TType.STRING, 'data', None, None, ), # 8
  )

  def __init__(self, version=thrift_spec[1][4], tid=None, type=None, success=None, cp=thrift_spec[5][4], properties=None, flag=thrift_spec[7][4], data=None,):
    self.version = version
    self.tid = tid
    self.type = type
    self.success = success
    self.cp = cp
    self.properties = properties
    self.flag = flag
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.version = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.success = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.properties = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString()
            _val6 = iprot.readString()
            self.properties[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.flag = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BmnRequest')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I16, 1)
      oprot.writeI16(self.version)
      oprot.writeFieldEnd()
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 2)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 4)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.cp is not None:
      oprot.writeFieldBegin('cp', TType.I32, 5)
      oprot.writeI32(self.cp)
      oprot.writeFieldEnd()
    if self.properties is not None:
      oprot.writeFieldBegin('properties', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.properties))
      for kiter7,viter8 in self.properties.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.BYTE, 7)
      oprot.writeByte(self.flag)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 8)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    if self.tid is None:
      raise TProtocol.TProtocolException(message='Required field tid is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.tid)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.cp)
    value = (value * 31) ^ hash(self.properties)
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BmnResponse:
  """
  Attributes:
   - tid
   - errorCode
   - message
   - data
   - did
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tid', None, None, ), # 1
    (2, TType.I32, 'errorCode', None, None, ), # 2
    (3, TType.STRING, 'message', None, None, ), # 3
    (4, TType.STRING, 'data', None, None, ), # 4
    (5, TType.STRING, 'did', None, None, ), # 5
  )

  def __init__(self, tid=None, errorCode=None, message=None, data=None, did=None,):
    self.tid = tid
    self.errorCode = errorCode
    self.message = message
    self.data = data
    self.did = did

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.data = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.did = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BmnResponse')
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 1)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 2)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 3)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 4)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.did is not None:
      oprot.writeFieldBegin('did', TType.STRING, 5)
      oprot.writeString(self.did)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tid is None:
      raise TProtocol.TProtocolException(message='Required field tid is unset!')
    if self.errorCode is None:
      raise TProtocol.TProtocolException(message='Required field errorCode is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tid)
    value = (value * 31) ^ hash(self.errorCode)
    value = (value * 31) ^ hash(self.message)
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.did)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
