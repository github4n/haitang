/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bmn.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-02-15")
public class BmnResult implements org.apache.thrift.TBase<BmnResult, BmnResult._Fields>, java.io.Serializable, Cloneable, Comparable<BmnResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmnResult");

  private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("answer", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmnResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmnResultTupleSchemeFactory());
  }

  public String q; // required
  public String op; // required
  public String type; // required
  public List<BmnAnswer> answer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    Q((short)1, "q"),
    OP((short)2, "op"),
    TYPE((short)3, "type"),
    ANSWER((short)4, "answer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // Q
          return Q;
        case 2: // OP
          return OP;
        case 3: // TYPE
          return TYPE;
        case 4: // ANSWER
          return ANSWER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmnAnswer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmnResult.class, metaDataMap);
  }

  public BmnResult() {
  }

  public BmnResult(
    String q,
    String op,
    String type,
    List<BmnAnswer> answer)
  {
    this();
    this.q = q;
    this.op = op;
    this.type = type;
    this.answer = answer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmnResult(BmnResult other) {
    if (other.isSetQ()) {
      this.q = other.q;
    }
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetAnswer()) {
      List<BmnAnswer> __this__answer = new ArrayList<BmnAnswer>(other.answer.size());
      for (BmnAnswer other_element : other.answer) {
        __this__answer.add(new BmnAnswer(other_element));
      }
      this.answer = __this__answer;
    }
  }

  public BmnResult deepCopy() {
    return new BmnResult(this);
  }

  @Override
  public void clear() {
    this.q = null;
    this.op = null;
    this.type = null;
    this.answer = null;
  }

  public String getQ() {
    return this.q;
  }

  public BmnResult setQ(String q) {
    this.q = q;
    return this;
  }

  public void unsetQ() {
    this.q = null;
  }

  /** Returns true if field q is set (has been assigned a value) and false otherwise */
  public boolean isSetQ() {
    return this.q != null;
  }

  public void setQIsSet(boolean value) {
    if (!value) {
      this.q = null;
    }
  }

  public String getOp() {
    return this.op;
  }

  public BmnResult setOp(String op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public BmnResult setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getAnswerSize() {
    return (this.answer == null) ? 0 : this.answer.size();
  }

  public java.util.Iterator<BmnAnswer> getAnswerIterator() {
    return (this.answer == null) ? null : this.answer.iterator();
  }

  public void addToAnswer(BmnAnswer elem) {
    if (this.answer == null) {
      this.answer = new ArrayList<BmnAnswer>();
    }
    this.answer.add(elem);
  }

  public List<BmnAnswer> getAnswer() {
    return this.answer;
  }

  public BmnResult setAnswer(List<BmnAnswer> answer) {
    this.answer = answer;
    return this;
  }

  public void unsetAnswer() {
    this.answer = null;
  }

  /** Returns true if field answer is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer() {
    return this.answer != null;
  }

  public void setAnswerIsSet(boolean value) {
    if (!value) {
      this.answer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case Q:
      if (value == null) {
        unsetQ();
      } else {
        setQ((String)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ANSWER:
      if (value == null) {
        unsetAnswer();
      } else {
        setAnswer((List<BmnAnswer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case Q:
      return getQ();

    case OP:
      return getOp();

    case TYPE:
      return getType();

    case ANSWER:
      return getAnswer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case Q:
      return isSetQ();
    case OP:
      return isSetOp();
    case TYPE:
      return isSetType();
    case ANSWER:
      return isSetAnswer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmnResult)
      return this.equals((BmnResult)that);
    return false;
  }

  public boolean equals(BmnResult that) {
    if (that == null)
      return false;

    boolean this_present_q = true && this.isSetQ();
    boolean that_present_q = true && that.isSetQ();
    if (this_present_q || that_present_q) {
      if (!(this_present_q && that_present_q))
        return false;
      if (!this.q.equals(that.q))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_answer = true && this.isSetAnswer();
    boolean that_present_answer = true && that.isSetAnswer();
    if (this_present_answer || that_present_answer) {
      if (!(this_present_answer && that_present_answer))
        return false;
      if (!this.answer.equals(that.answer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_q = true && (isSetQ());
    list.add(present_q);
    if (present_q)
      list.add(q);

    boolean present_op = true && (isSetOp());
    list.add(present_op);
    if (present_op)
      list.add(op);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_answer = true && (isSetAnswer());
    list.add(present_answer);
    if (present_answer)
      list.add(answer);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmnResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQ()).compareTo(other.isSetQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, other.q);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmnResult(");
    boolean first = true;

    sb.append("q:");
    if (this.q == null) {
      sb.append("null");
    } else {
      sb.append(this.q);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer:");
    if (this.answer == null) {
      sb.append("null");
    } else {
      sb.append(this.answer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (q == null) {
      throw new TProtocolException("Required field 'q' was not present! Struct: " + toString());
    }
    if (op == null) {
      throw new TProtocolException("Required field 'op' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (answer == null) {
      throw new TProtocolException("Required field 'answer' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmnResultStandardSchemeFactory implements SchemeFactory {
    public BmnResultStandardScheme getScheme() {
      return new BmnResultStandardScheme();
    }
  }

  private static class BmnResultStandardScheme extends StandardScheme<BmnResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmnResult struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // Q
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.q = iprot.readString();
              struct.setQIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.op = iprot.readString();
              struct.setOpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.answer = new ArrayList<BmnAnswer>(_list0.size);
                BmnAnswer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new BmnAnswer();
                  _elem1.read(iprot);
                  struct.answer.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAnswerIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmnResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.q != null) {
        oprot.writeFieldBegin(Q_FIELD_DESC);
        oprot.writeString(struct.q);
        oprot.writeFieldEnd();
      }
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeString(struct.op);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.answer != null) {
        oprot.writeFieldBegin(ANSWER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.answer.size()));
          for (BmnAnswer _iter3 : struct.answer)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmnResultTupleSchemeFactory implements SchemeFactory {
    public BmnResultTupleScheme getScheme() {
      return new BmnResultTupleScheme();
    }
  }

  private static class BmnResultTupleScheme extends TupleScheme<BmnResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmnResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.q);
      oprot.writeString(struct.op);
      oprot.writeString(struct.type);
      {
        oprot.writeI32(struct.answer.size());
        for (BmnAnswer _iter4 : struct.answer)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmnResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.q = iprot.readString();
      struct.setQIsSet(true);
      struct.op = iprot.readString();
      struct.setOpIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.answer = new ArrayList<BmnAnswer>(_list5.size);
        BmnAnswer _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new BmnAnswer();
          _elem6.read(iprot);
          struct.answer.add(_elem6);
        }
      }
      struct.setAnswerIsSet(true);
    }
  }

}

