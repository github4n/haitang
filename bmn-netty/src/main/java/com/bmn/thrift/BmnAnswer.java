/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bmn.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-02-15")
public class BmnAnswer implements org.apache.thrift.TBase<BmnAnswer, BmnAnswer._Fields>, java.io.Serializable, Cloneable, Comparable<BmnAnswer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmnAnswer");

  private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmnAnswerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmnAnswerTupleSchemeFactory());
  }

  public String r; // required
  public String c; // required
  public String t; // optional
  public String u; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    R((short)1, "r"),
    C((short)2, "c"),
    T((short)3, "t"),
    U((short)4, "u");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // R
          return R;
        case 2: // C
          return C;
        case 3: // T
          return T;
        case 4: // U
          return U;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.T, _Fields.U};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmnAnswer.class, metaDataMap);
  }

  public BmnAnswer() {
  }

  public BmnAnswer(
    String r,
    String c)
  {
    this();
    this.r = r;
    this.c = c;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmnAnswer(BmnAnswer other) {
    if (other.isSetR()) {
      this.r = other.r;
    }
    if (other.isSetC()) {
      this.c = other.c;
    }
    if (other.isSetT()) {
      this.t = other.t;
    }
    if (other.isSetU()) {
      this.u = other.u;
    }
  }

  public BmnAnswer deepCopy() {
    return new BmnAnswer(this);
  }

  @Override
  public void clear() {
    this.r = null;
    this.c = null;
    this.t = null;
    this.u = null;
  }

  public String getR() {
    return this.r;
  }

  public BmnAnswer setR(String r) {
    this.r = r;
    return this;
  }

  public void unsetR() {
    this.r = null;
  }

  /** Returns true if field r is set (has been assigned a value) and false otherwise */
  public boolean isSetR() {
    return this.r != null;
  }

  public void setRIsSet(boolean value) {
    if (!value) {
      this.r = null;
    }
  }

  public String getC() {
    return this.c;
  }

  public BmnAnswer setC(String c) {
    this.c = c;
    return this;
  }

  public void unsetC() {
    this.c = null;
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return this.c != null;
  }

  public void setCIsSet(boolean value) {
    if (!value) {
      this.c = null;
    }
  }

  public String getT() {
    return this.t;
  }

  public BmnAnswer setT(String t) {
    this.t = t;
    return this;
  }

  public void unsetT() {
    this.t = null;
  }

  /** Returns true if field t is set (has been assigned a value) and false otherwise */
  public boolean isSetT() {
    return this.t != null;
  }

  public void setTIsSet(boolean value) {
    if (!value) {
      this.t = null;
    }
  }

  public String getU() {
    return this.u;
  }

  public BmnAnswer setU(String u) {
    this.u = u;
    return this;
  }

  public void unsetU() {
    this.u = null;
  }

  /** Returns true if field u is set (has been assigned a value) and false otherwise */
  public boolean isSetU() {
    return this.u != null;
  }

  public void setUIsSet(boolean value) {
    if (!value) {
      this.u = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case R:
      if (value == null) {
        unsetR();
      } else {
        setR((String)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((String)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((String)value);
      }
      break;

    case U:
      if (value == null) {
        unsetU();
      } else {
        setU((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case R:
      return getR();

    case C:
      return getC();

    case T:
      return getT();

    case U:
      return getU();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case R:
      return isSetR();
    case C:
      return isSetC();
    case T:
      return isSetT();
    case U:
      return isSetU();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmnAnswer)
      return this.equals((BmnAnswer)that);
    return false;
  }

  public boolean equals(BmnAnswer that) {
    if (that == null)
      return false;

    boolean this_present_r = true && this.isSetR();
    boolean that_present_r = true && that.isSetR();
    if (this_present_r || that_present_r) {
      if (!(this_present_r && that_present_r))
        return false;
      if (!this.r.equals(that.r))
        return false;
    }

    boolean this_present_c = true && this.isSetC();
    boolean that_present_c = true && that.isSetC();
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (!this.c.equals(that.c))
        return false;
    }

    boolean this_present_t = true && this.isSetT();
    boolean that_present_t = true && that.isSetT();
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (!this.t.equals(that.t))
        return false;
    }

    boolean this_present_u = true && this.isSetU();
    boolean that_present_u = true && that.isSetU();
    if (this_present_u || that_present_u) {
      if (!(this_present_u && that_present_u))
        return false;
      if (!this.u.equals(that.u))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_r = true && (isSetR());
    list.add(present_r);
    if (present_r)
      list.add(r);

    boolean present_c = true && (isSetC());
    list.add(present_c);
    if (present_c)
      list.add(c);

    boolean present_t = true && (isSetT());
    list.add(present_t);
    if (present_t)
      list.add(t);

    boolean present_u = true && (isSetU());
    list.add(present_u);
    if (present_u)
      list.add(u);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmnAnswer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT()).compareTo(other.isSetT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetU()).compareTo(other.isSetU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmnAnswer(");
    boolean first = true;

    sb.append("r:");
    if (this.r == null) {
      sb.append("null");
    } else {
      sb.append(this.r);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    if (this.c == null) {
      sb.append("null");
    } else {
      sb.append(this.c);
    }
    first = false;
    if (isSetT()) {
      if (!first) sb.append(", ");
      sb.append("t:");
      if (this.t == null) {
        sb.append("null");
      } else {
        sb.append(this.t);
      }
      first = false;
    }
    if (isSetU()) {
      if (!first) sb.append(", ");
      sb.append("u:");
      if (this.u == null) {
        sb.append("null");
      } else {
        sb.append(this.u);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (r == null) {
      throw new TProtocolException("Required field 'r' was not present! Struct: " + toString());
    }
    if (c == null) {
      throw new TProtocolException("Required field 'c' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmnAnswerStandardSchemeFactory implements SchemeFactory {
    public BmnAnswerStandardScheme getScheme() {
      return new BmnAnswerStandardScheme();
    }
  }

  private static class BmnAnswerStandardScheme extends StandardScheme<BmnAnswer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmnAnswer struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // R
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.r = iprot.readString();
              struct.setRIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.c = iprot.readString();
              struct.setCIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // T
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.t = iprot.readString();
              struct.setTIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // U
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.u = iprot.readString();
              struct.setUIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmnAnswer struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.r != null) {
        oprot.writeFieldBegin(R_FIELD_DESC);
        oprot.writeString(struct.r);
        oprot.writeFieldEnd();
      }
      if (struct.c != null) {
        oprot.writeFieldBegin(C_FIELD_DESC);
        oprot.writeString(struct.c);
        oprot.writeFieldEnd();
      }
      if (struct.t != null) {
        if (struct.isSetT()) {
          oprot.writeFieldBegin(T_FIELD_DESC);
          oprot.writeString(struct.t);
          oprot.writeFieldEnd();
        }
      }
      if (struct.u != null) {
        if (struct.isSetU()) {
          oprot.writeFieldBegin(U_FIELD_DESC);
          oprot.writeString(struct.u);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmnAnswerTupleSchemeFactory implements SchemeFactory {
    public BmnAnswerTupleScheme getScheme() {
      return new BmnAnswerTupleScheme();
    }
  }

  private static class BmnAnswerTupleScheme extends TupleScheme<BmnAnswer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmnAnswer struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.r);
      oprot.writeString(struct.c);
      BitSet optionals = new BitSet();
      if (struct.isSetT()) {
        optionals.set(0);
      }
      if (struct.isSetU()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetT()) {
        oprot.writeString(struct.t);
      }
      if (struct.isSetU()) {
        oprot.writeString(struct.u);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmnAnswer struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.r = iprot.readString();
      struct.setRIsSet(true);
      struct.c = iprot.readString();
      struct.setCIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.t = iprot.readString();
        struct.setTIsSet(true);
      }
      if (incoming.get(1)) {
        struct.u = iprot.readString();
        struct.setUIsSet(true);
      }
    }
  }

}

